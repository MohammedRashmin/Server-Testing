services:
    
  gateway:
    image: ${DOCKER_REGISTRY-}gateway
    build:
      context: .
      dockerfile: Gateway/Dockerfile
    networks : 
        - MicroServiceNetwork
    ports:
      - "5000:5000"
    depends_on :
      - booksservice
      - rentalsservice
      - userservice
    restart: on-failure


  yarp_gateway:
    image: ${DOCKER_REGISTRY-}yarpgateway
    build:
      context: .
      dockerfile: Yarp_gateway/Dockerfile
    ports:
      - "6000:6000"
    networks : 
        - MicroServiceNetwork


  booksservice:
    image: ${DOCKER_REGISTRY-}booksservice
    build:
      context: .
      dockerfile: BooksService/Dockerfile
    depends_on:
      - sqlserver
    environment:
     - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "8000:8000"
    networks : 
        - MicroServiceNetwork
    restart: on-failure


  rentalsservice:
    image: ${DOCKER_REGISTRY-}rentalsservice
    build:
      context: .
      dockerfile: RentalsService/Dockerfile
    depends_on:
      - sqlserver
    environment:
       - ASPNETCORE_ENVIRONMENT=Development 
    ports:
      - "7000:7000"
    networks : 
        - MicroServiceNetwork
    restart: on-failure


  userservice:
    image: ${DOCKER_REGISTRY-}usersservice
    build:
      context: .
      dockerfile: User-service/Dockerfile
    depends_on:
      - sqlserver
    environment:
       - ASPNETCORE_ENVIRONMENT=Development 
    ports:
      - "9000:9000"
    networks : 
        - MicroServiceNetwork
    restart: on-failure

    
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    ports:
      - "1433:1433"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD : "Anutae08v"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks : 
     - MicroServiceNetwork
    restart: on-failure
    

networks:
  MicroServiceNetwork:


volumes:
  sqlserver_data:
